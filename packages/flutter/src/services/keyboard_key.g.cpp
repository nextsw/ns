#include "keyboard_key.g.hpp"
String LogicalKeyboardKey::keyLabel() {
    return _unicodeKeyLabel(keyId) ?? _keyLabels[keyId] ?? "";
}

String LogicalKeyboardKey::debugName() {
    String result;
    assert(());
    return result;
}

int LogicalKeyboardKey::hashCode() {
    return keyId.hashCode;
}

bool LogicalKeyboardKey::==(Object other) {
    if (identical(this, other)) {
        return true;
    }
    if (other.runtimeType != runtimeType) {
        return false;
    }
    return other is LogicalKeyboardKey && other.keyId == keyId;
}

LogicalKeyboardKey LogicalKeyboardKey::findKeyByKeyId(int keyId) {
    return _knownLogicalKeys[keyId];
}

bool LogicalKeyboardKey::isControlCharacter(String label) {
    if (label.length != 1) {
        return false;
    }
    int codeUnit = label.codeUnitAt(0);
    return (codeUnit <= 0x1f && codeUnit >= 0x00) || (codeUnit >= 0x7f && codeUnit <= 0x9f);
}

bool LogicalKeyboardKey::isAutogenerated() {
    return (keyId & planeMask) >= startOfPlatformPlanes;
}

Set<LogicalKeyboardKey> LogicalKeyboardKey::synonyms() {
    LogicalKeyboardKey result = _synonyms[this];
    return result == nullptr?  : ;
}

Set<LogicalKeyboardKey> LogicalKeyboardKey::collapseSynonyms(Set<LogicalKeyboardKey> input) {
    Set<LogicalKeyboardKey> result = ;
    for (LogicalKeyboardKey key : input) {
        LogicalKeyboardKey synonym = _synonyms[key];
        result.add(synonym ?? key);
    }
    return result;
}

void LogicalKeyboardKey::debugFillProperties(DiagnosticPropertiesBuilder properties) {
    super.debugFillProperties(properties);
    properties.add(StringProperty("keyId", "0x${keyId.toRadixString(16).padLeft(8, '0')}"));
    properties.add(StringProperty("keyLabel", keyLabel));
    properties.add(StringProperty("debugName", debugNamenullptr));
}

Iterable<LogicalKeyboardKey> LogicalKeyboardKey::knownLogicalKeys() {
    return _knownLogicalKeys.values;
}

int LogicalKeyboardKey::_nonValueBits(int n) {
    int divisorForValueMask = valueMask + 1;
    int valueMaskWidth = 32;
    int firstDivisorWidth = 28;
    assert(divisorForValueMask == (1 << firstDivisorWidth) * (1 << (valueMaskWidth - firstDivisorWidth)));
    int maxSafeIntegerWidth = 52;
    int nonValueMask = (1 << (maxSafeIntegerWidth - valueMaskWidth)) - 1;
    if (kIsWeb) {
        return (n / divisorForValueMask).floor() & nonValueMask;
    } else {
        return (n >> valueMaskWidth) & nonValueMask;
    }
}

String LogicalKeyboardKey::_unicodeKeyLabel(int keyId) {
    if (_nonValueBits(keyId) == 0) {
        return String.fromCharCode(keyId).toUpperCase();
    }
    return nullptr;
}

String PhysicalKeyboardKey::debugName() {
    String result;
    assert(());
    return result;
}

int PhysicalKeyboardKey::hashCode() {
    return usbHidUsage.hashCode;
}

bool PhysicalKeyboardKey::==(Object other) {
    if (identical(this, other)) {
        return true;
    }
    if (other.runtimeType != runtimeType) {
        return false;
    }
    return other is PhysicalKeyboardKey && other.usbHidUsage == usbHidUsage;
}

PhysicalKeyboardKey PhysicalKeyboardKey::findKeyByCode(int usageCode) {
    return _knownPhysicalKeys[usageCode];
}

void PhysicalKeyboardKey::debugFillProperties(DiagnosticPropertiesBuilder properties) {
    super.debugFillProperties(properties);
    properties.add(StringProperty("usbHidUsage", "0x${usbHidUsage.toRadixString(16).padLeft(8, '0')}"));
    properties.add(StringProperty("debugName", debugNamenullptr));
}

Iterable<PhysicalKeyboardKey> PhysicalKeyboardKey::knownPhysicalKeys() {
    return _knownPhysicalKeys.values;
}
